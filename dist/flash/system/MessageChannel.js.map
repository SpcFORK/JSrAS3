{"version":3,"sources":["../../../src/flash/system/MessageChannel.ts","../../../src/flash/system/MessageChannelState.ts","../../../src/flash/events/EventDispatcher.ts"],"sourcesContent":["import './global'\n\nimport AS_MessageChannelState from \"./MessageChannelState\";\n\nimport { AS_EventDispatcher } from '../events'\n\nexport default class AS_MessageChannel extends AS_EventDispatcher {\n  #state: AS_MessageChannelState | undefined;\n  #buffer: ArrayBuffer | undefined;\n  #view: DataView | undefined;\n  #byteOffset: number | undefined;\n  #byteLength: number | undefined;\n  #isClosed: boolean | undefined;\n\n  constructor(buffer: ArrayBuffer, byteOffset: number, byteLength: number) {\n    super();\n    this.#initializeChannel(buffer, byteOffset, byteLength);\n  }\n\n  #initializeChannel(buffer: ArrayBuffer, byteOffset: number, byteLength: number): void {\n    this.#state = AS_MessageChannelState.OPEN;\n    this.#buffer = buffer;\n    this.#view = new DataView(buffer, byteOffset, byteLength);\n    this.#byteOffset = byteOffset;\n    this.#byteLength = byteLength;\n    this.#isClosed = false;\n  }\n\n  get state() {\n    return this.#state;\n  }\n\n  get buffer() {\n    return this.#buffer;\n  }\n\n  get view() {\n    return this.#view;\n  }\n\n  get byteOffset() {\n    return this.#byteOffset;\n  }\n\n  get byteLength() {\n    return this.#byteLength;\n  }\n\n  get isClosed() {\n    return this.#isClosed;\n  }\n}","import './global'\n\nexport default class AS_MessageChannelState implements AST_MessageChannelState {\n  /**\n   * This state indicates that the message channel has been closed and doesn't have any more messages to deliver.\n   */\n  static CLOSED: \"closed\";\n  /**\n   * This state indicates that the message channel has been instructed to close and is in the process of delivering the remaining messages on the channel.\n   */\n  static CLOSING: \"closing\";\n  /**\n   * This state indicates that the message channel is open and available\n   * for use.\n   */\n  static OPEN: \"open\";\n}","import { AST_EventDispatcher } from './global'\n\nimport { AS_EventListener } from './EventListener'\n\nexport class AS_EventDispatcher {\n\n  private listeners = new Map<string, AS_EventListener[]>\n\n  public addEventListener(type: string, listener: Function, useCapture: boolean = false, priority: number = 0, useWeakReference: boolean = false): void {\n    if (!this.listeners.has(type)) {\n      this.listeners.set(type, []);\n    }\n    const listeners = this.listeners.get(type);\n    if (listeners) {\n      const index = listeners.findIndex(item => item.priority < priority);\n      const eventListener: AS_EventListener = { priority, listener, useCapture };\n\n      if (useWeakReference) {\n        eventListener.listener = new WeakRef(listener);\n      }\n\n      if (index === -1) {\n        listeners.push(eventListener);\n      } else {\n        listeners.splice(index, 0, eventListener);\n      }\n    }\n  }\n\n  public dispatchEvent(event: Event): boolean {\n    const eventListeners = this.listeners.get(event.type);\n    if (eventListeners) {\n      for (const { listener } of eventListeners) if (!(listener instanceof WeakRef)) {\n        listener(event);\n      } else {\n        const derefListener = listener.deref();\n        if (derefListener)\n          derefListener(event);\n      }\n      return true;\n    }\n    return false;\n  }\n\n  public hasEventListener(type: string): boolean {\n    return this.listeners.has(type);\n  }\n\n  public removeEventListener(type: string, listener: Function, useCapture: boolean = false): void {\n    const eventListeners = this.listeners.get(type);\n\n    const filterListeners = (l: AS_EventListener) => {\n      if (l.listener instanceof WeakRef)\n        return l.listener.deref() !== listener;\n      return l.listener !== listener;\n    }\n\n    if (eventListeners) {\n      this.listeners.set(type, eventListeners.filter((b) => filterListeners(b)));\n    }\n  }\n\n  public willTrigger(type: string): boolean {\n    return this.hasEventListener(type);\n  }\n}"],"mappings":"yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GCEA,IAAqBI,EAArB,KAA+E,CAI7E,OAAO,OAIP,OAAO,QAKP,OAAO,IACT,ECZO,IAAMC,EAAN,KAAyB,CAEtB,UAAY,IAAI,IAEjB,iBAAiBC,EAAcC,EAAoBC,EAAsB,GAAOC,EAAmB,EAAGC,EAA4B,GAAa,CAC/I,KAAK,UAAU,IAAIJ,CAAI,GAC1B,KAAK,UAAU,IAAIA,EAAM,CAAC,CAAC,EAE7B,IAAMK,EAAY,KAAK,UAAU,IAAIL,CAAI,EACzC,GAAIK,EAAW,CACb,IAAMC,EAAQD,EAAU,UAAUE,GAAQA,EAAK,SAAWJ,CAAQ,EAC5DK,EAAkC,CAAE,SAAAL,EAAU,SAAAF,EAAU,WAAAC,CAAW,EAErEE,IACFI,EAAc,SAAW,IAAI,QAAQP,CAAQ,GAG3CK,IAAU,GACZD,EAAU,KAAKG,CAAa,EAE5BH,EAAU,OAAOC,EAAO,EAAGE,CAAa,CAE5C,CACF,CAEO,cAAcC,EAAuB,CAC1C,IAAMC,EAAiB,KAAK,UAAU,IAAID,EAAM,IAAI,EACpD,GAAIC,EAAgB,CAClB,OAAW,CAAE,SAAAT,CAAS,IAAKS,EAAgB,GAAI,EAAET,aAAoB,SACnEA,EAASQ,CAAK,MACT,CACL,IAAME,EAAgBV,EAAS,MAAM,EACjCU,GACFA,EAAcF,CAAK,CACvB,CACA,MAAO,EACT,CACA,MAAO,EACT,CAEO,iBAAiBT,EAAuB,CAC7C,OAAO,KAAK,UAAU,IAAIA,CAAI,CAChC,CAEO,oBAAoBA,EAAcC,EAAoBC,EAAsB,GAAa,CAC9F,IAAMQ,EAAiB,KAAK,UAAU,IAAIV,CAAI,EAExCY,EAAmBC,GACnBA,EAAE,oBAAoB,QACjBA,EAAE,SAAS,MAAM,IAAMZ,EACzBY,EAAE,WAAaZ,EAGpBS,GACF,KAAK,UAAU,IAAIV,EAAMU,EAAe,OAAQI,GAAMF,EAAgBE,CAAC,CAAC,CAAC,CAE7E,CAEO,YAAYd,EAAuB,CACxC,OAAO,KAAK,iBAAiBA,CAAI,CACnC,CACF,EF3DA,IAAqBe,EAArB,cAA+CC,CAAmB,CAChEC,GACAC,GACAC,GACAC,GACAC,GACAC,GAEA,YAAYC,EAAqBC,EAAoBC,EAAoB,CACvE,MAAM,EACN,KAAKC,GAAmBH,EAAQC,EAAYC,CAAU,CACxD,CAEAC,GAAmBH,EAAqBC,EAAoBC,EAA0B,CACpF,KAAKR,GAASU,EAAuB,KACrC,KAAKT,GAAUK,EACf,KAAKJ,GAAQ,IAAI,SAASI,EAAQC,EAAYC,CAAU,EACxD,KAAKL,GAAcI,EACnB,KAAKH,GAAcI,EACnB,KAAKH,GAAY,EACnB,CAEA,IAAI,OAAQ,CACV,OAAO,KAAKL,EACd,CAEA,IAAI,QAAS,CACX,OAAO,KAAKC,EACd,CAEA,IAAI,MAAO,CACT,OAAO,KAAKC,EACd,CAEA,IAAI,YAAa,CACf,OAAO,KAAKC,EACd,CAEA,IAAI,YAAa,CACf,OAAO,KAAKC,EACd,CAEA,IAAI,UAAW,CACb,OAAO,KAAKC,EACd,CACF","names":["MessageChannel_exports","__export","AS_MessageChannel","__toCommonJS","AS_MessageChannelState","AS_EventDispatcher","type","listener","useCapture","priority","useWeakReference","listeners","index","item","eventListener","event","eventListeners","derefListener","filterListeners","l","b","AS_MessageChannel","AS_EventDispatcher","#state","#buffer","#view","#byteOffset","#byteLength","#isClosed","buffer","byteOffset","byteLength","#initializeChannel","AS_MessageChannelState"]}