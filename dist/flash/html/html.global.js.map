{"version":3,"sources":["../../../src/flash/html/html.ts"],"sourcesContent":["export interface HTMLParserHandler {\n  comment?: (text: string) => void;\n  chars?: (text: string) => void;\n  start?: (tag: string, attrs: any, unary: boolean) => void;\n  end?: (tag: string) => void;\n}\n\nexport class HTMLParser {\n  static makeMap(str: string) {\n    const obj = Object.create(null);\n    const items = str.split(\",\");\n    for (let i = 0; i < items.length; i++) {\n      obj[items[i]] = true;\n    }\n    return obj;\n  }\n\n  static startTag = /^<([-A-Za-z0-9_]+)((?:\\s+[-A-Za-z0-9_]+(?:\\s*=\\s*(?:(?:\"[^\"]*\")|(?:'[^']*')|[^>\\s]+))?)*)\\s*(\\/?)>/\n\n  static endTag = /^<\\/([-A-Za-z0-9_]+)[^>]*>/\n\n  static attr = /([-A-Za-z0-9_]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|([^>\\s]+)))?/g\n\n  // Empty Elements - HTML 4.01\n  static empty = this.makeMap(\"area,base,basefont,br,col,frame,hr,img,input,isindex,link,meta,param,embed\");\n\n  // Block Elements - HTML 4.01\n  static block = this.makeMap(\"address,applet,blockquote,button,center,dd,del,dir,div,dl,dt,fieldset,form,frameset,hr,iframe,ins,isindex,li,map,menu,noframes,noscript,object,ol,p,pre,script,table,tbody,td,tfoot,th,thead,tr,ul\");\n\n  // Inline Elements - HTML 4.01\n  static inline = this.makeMap(\"a,abbr,acronym,applet,b,basefont,bdo,big,br,button,cite,code,del,dfn,em,font,i,iframe,img,input,ins,kbd,label,map,object,q,s,samp,script,select,small,span,strike,strong,sub,sup,textarea,tt,u,var\");\n\n  // Elements that you can, intentionally, leave open\n  // (and which close themselves)\n  static closeSelf = this.makeMap(\"colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr\");\n\n  // Attributes that have their values filled in disabled=\"disabled\"\n  static fillAttrs = this.makeMap(\"checked,compact,declare,defer,disabled,ismap,multiple,nohref,noresize,noshade,nowrap,readonly,selected\");\n\n  // Special Elements (can contain anything)\n  static special = this.makeMap(\"script,style\");\n\n  private stack: string[] = [];\n  private last: string;\n  private handler: HTMLParserHandler;\n\n  constructor(private html: string, handler: HTMLParserHandler) {\n    this.last = html;\n    this.handler = handler;\n    this.parseHTML();\n  }\n\n  private top() {\n    return this.stack[this.stack.length - 1];\n  }\n\n  private parseHTML() {\n    let index: number | undefined;\n    let chars: boolean;\n    let match: any;\n    let html = this.html;\n\n    while (html) {\n      chars = true;\n\n      // Make sure we're not in a script or style element\n      if (!this.top() || !HTMLParser.special[this.top()])\n        ({ index, html } = this.handleNode(index, match, html, chars))\n      else\n        html = this.handleScript(html);\n\n      if (html == this.last) {\n        throw \"Parse Error: \" + html;\n      }\n      this.last = html;\n    }\n\n    // Clean up any remaining tags\n    this.parseEndTag();\n  }\n\n  private handleNode(index: number | undefined, match: any, html: string, chars: boolean) {\n\n    ({ index, match } = this.handleNormalNode(html, chars, match));\n\n    if (chars) {\n      index = html.indexOf(\"<\");\n\n      const text = index < 0 ? html : html.substring(0, index);\n      html = index < 0 ? \"\" : html.substring(index);\n\n      this.dumpHandlerChars(text);\n    }\n\n    return { index, html };\n  }\n\n  private dumpHandlerChars(text: string) {\n    if (this.handler.chars) {\n      this.handler.chars(text);\n    }\n  }\n\n  private handleScript(html: string) {\n\n    html = html.replace(new RegExp(\"(.*)<\\/\" + this.top() + \"[^>]*>\"), (all: string, text: string) => {\n      text = text.replace(/<!--(.*?)-->/g, \"$1\")\n        .replace(/<!\\[CDATA\\[(.*?)]]>/g, \"$1\");\n\n      this.dumpHandlerChars(text);\n\n      return \"\";\n    });\n\n    this.parseEndTag(\"\", this.top());\n\n    return html;\n  }\n\n  private handleNormalNode(html: string, chars: boolean, match: any) {\n    let index: number | undefined;\n\n    // Comment\n    if (html.indexOf(\"<!--\") == 0) {\n      index = html.indexOf(\"-->\");\n\n      ({ html, chars } = this.handleComment(index, html, chars));\n\n    }\n\n    // end tag\n    else if (html.indexOf(\"</\") == 0) {\n      match = html.match(HTMLParser.endTag);\n\n      ({ html, chars } = this.handleEndTag(match, html, chars));\n\n    }\n\n    // start tag\n    else if (html.indexOf(\"<\") == 0) {\n      match = html.match(HTMLParser.startTag);\n\n      ({ html, chars } = this.handleStartTag(match, html, chars));\n    }\n\n    return { index, match };\n  }\n\n  private handleStartTag(match: any, html: string, chars: boolean) {\n    if (match) {\n      html = html.substring(match[0].length);\n      match[0].replace(HTMLParser.startTag, this.parseStartTag.bind(this));\n      chars = false;\n    }\n    return { html, chars };\n  }\n\n  private handleEndTag(match: any, html: string, chars: boolean) {\n    if (match) {\n      html = html.substring(match[0].length);\n      match[0].replace(HTMLParser.endTag, this.parseEndTag.bind(this));\n      chars = false;\n    }\n    return { html, chars };\n  }\n\n  private handleComment(index: number, html: string, chars: boolean) {\n    if (index >= 0) {\n      if (this.handler.comment) {\n        this.handler.comment(html.substring(4, index));\n      }\n      html = html.substring(index + 3);\n      chars = false;\n    }\n    return { html, chars };\n  }\n\n  private parseStartTag(tag: string, tagName: string, rest: string, unary: string) {\n    tagName = tagName.toLowerCase();\n\n    if (HTMLParser.block[tagName]) {\n      while (this.top() && HTMLParser.inline[this.top()]) {\n        this.parseEndTag(\"\", this.top());\n      }\n    }\n\n    if (HTMLParser.closeSelf[tagName] && this.top() == tagName) {\n      this.parseEndTag(\"\", tagName);\n    }\n\n    unary = HTMLParser.empty[tagName] || !!unary;\n\n    if (!unary) {\n      this.stack.push(tagName);\n    }\n\n    if (this.handler.start) {\n      const attrs = Object.create(null);\n\n      rest.replace(HTMLParser.attr, (match: string, name: string) => {\n        name = name.toLowerCase();\n\n        const value = arguments[2] ? arguments[2] :\n          arguments[3] ? arguments[3] :\n            arguments[4] ? arguments[4] :\n              HTMLParser.fillAttrs[name] ? name : \"\";\n\n        attrs[name] = value;\n\n        return match;\n      });\n\n      if (this.handler.start) {\n        this.handler.start(tagName, attrs, !!unary);\n      }\n    }\n  }\n\n  private parseEndTag(tag?: string, tagName?: string) {\n\n    // If no tag name is provided, clean shop\n    if (!tagName)\n      var pos = 0;\n\n    // Find the closest opened tag of the same type\n    else\n      for (var pos = this.stack.length - 1; pos >= 0; pos--)\n        if (this.stack[pos] == tagName)\n          break;\n\n    if (pos >= 0) {\n      // Close all the open elements, up the stack\n      for (var i = this.stack.length - 1; i >= pos; i--)\n        if (this.handler.end) {\n          this.handler.end(this.stack[i]);\n        }\n\n      // Remove the open elements from the stack\n      this.stack.length = pos;\n    }\n\n  }\n}"],"mappings":"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","names":["HTMLParser","_HTMLParser","html","handler","str","obj","items","i","index","chars","match","text","all","tag","tagName","rest","unary","attrs","name","value","pos"]}